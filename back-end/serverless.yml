service: albumshuffler
configValidationMode: error
frameworkVersion: '2'

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: ca-central-1
  stage: dev
  apiGateway:
    shouldStartNameWithService: true
  logRetentionInDays: 30
  iamRoleStatements:
  - Effect: "Allow"
    Action:
      - dynamodb:Query
      - dynamodb:Scan
      - dynamodb:GetItem
      - dynamodb:PutItem
      - dynamodb:UpdateItem
      - dynamodb:DeleteItem
      - dynamodb:BatchWriteItem
    Resource:
      Fn::GetAtt: 
      - AlbumShufflerTable
      - Arn
  - Effect: "Allow"
    Action:
      - sqs:SendMessage
      - sqs:GetQueueUrl
      - sqs:ReceiveMessage
    Resource:
      Fn::GetAtt:
      - AlbumImportQueue
      - Arn
  httpApi:
    cors: true
  environment:
    ALBUM_SHUFFLER_TABLE: ${self:custom.albumShufflerTable}
    ALBUM_IMPORT_QUEUE: ${self:custom.albumImportQueue}
    SPOTIFY_CLIENT_ID: ${ssm:/AlbumShuffler/${self:provider.stage}/spotify_client_id~true}
    SPOTIFY_CLIENT_SECRET: ${ssm:/AlbumShuffler/${self:provider.stage}/spotify_client_secret~true}
    JWT_SECRET: ${ssm:/AlbumShuffler/${self:provider.stage}/jwt_secret~true}

plugins:
  - serverless-python-requirements

custom:
  albumShufflerTable: ${self:provider.stage}-AlbumShufflerTable
  albumImportQueue: ${self:provider.stage}-AlbumImportQueue




# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  GetRandomAlbum:
    handler: functions/get_random_album.handler
    events:
      - httpApi: 
          path: /randomalbum
          method: GET
  SpotifyAuthCallback:
    handler: functions/spotify_auth_callback.handler
    events:
      - httpApi:
          path: /spotifyauth
          method: GET
  AlbumImporter:
    handler: functions/album_import_handler.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AlbumImportQueue
              - Arn
          batchSize: 1
          





#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    AlbumShufflerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-AlbumShufflerTable
        BillingMode: PAY_PER_REQUEST 
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
    AlbumImportQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.albumImportQueue}
    
    # WIP, probably not needed
    # AlbumShufflerApiRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: AlbumShufflerApiRole-${self:provider.stage}
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #       - Effect: Allow
    #         Principal:
    #           Service:
      
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
